--- catkin_ws/src/pluginlib/include/pluginlib/class_loader_imp.hpp
+++ catkin_ws/src/pluginlib/include/pluginlib/class_loader_imp.hpp
@@ -63,6 +63,11 @@ const std::string os_pathsep(";");  // NOLINT
 const std::string os_pathsep(":");  // NOLINT
 #endif
 
+// Helper function to load information of statically linked plugins.
+// This is needed for the static version of pluginlib used in systems
+// like Android.
+std::map<std::string, pluginlib::ClassDesc> getStaticClassesAvailable(void);
+
 namespace
 {
 std::vector<std::string> catkinFindLib()
@@ -103,14 +108,14 @@ ClassLoader<T>::ClassLoader(
 {
   ROS_DEBUG_NAMED("pluginlib.ClassLoader", "Creating ClassLoader, base = %s, address = %p",
     base_class.c_str(), this);
+#ifndef ANDROID
   if (ros::package::getPath(package_).empty()) {
     throw pluginlib::ClassLoaderException("Unable to find package: " + package_);
   }
+#endif
 
-  if (0 == plugin_xml_paths_.size()) {
-    plugin_xml_paths_ = getPluginXmlPaths(package_, attrib_name_);
-  }
-  classes_available_ = determineAvailableClasses(plugin_xml_paths_);
+  // get static info of the already loaded plugin library
+  classes_available_ = getStaticClassesAvailable();
   ROS_DEBUG_NAMED("pluginlib.ClassLoader",
     "Finished constructring ClassLoader, base = %s, address = %p",
     base_class.c_str(), this);
@@ -615,7 +620,7 @@ void ClassLoader<T>::loadLibraryForClass(const std::string & lookup_name)
     throw pluginlib::LibraryLoadException(getErrorStringForUnknownClass(lookup_name));
   }
 
-  std::string library_path = getClassLibraryPath(lookup_name);
+  std::string library_path = it->second.library_name_;
   if ("" == library_path) {
     ROS_DEBUG_NAMED("pluginlib.ClassLoader", "No path could be found to the library containing %s.",
       lookup_name.c_str());
