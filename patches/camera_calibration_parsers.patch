--- catkin_ws/src/image_common/camera_calibration_parsers/CMakeLists.txt
+++ catkin_ws/src/image_common/camera_calibration_parsers/CMakeLists.txt
@@ -2,22 +2,9 @@ cmake_minimum_required(VERSION 2.8)
 project(camera_calibration_parsers)
 
 find_package(catkin REQUIRED sensor_msgs rosconsole roscpp roscpp_serialization)
+find_package(Boost REQUIRED COMPONENTS filesystem)
 
-find_package(PythonLibs REQUIRED)
-if(PYTHONLIBS_VERSION_STRING VERSION_LESS 3)
-  find_package(Boost REQUIRED COMPONENTS filesystem python)
-else()
-  find_package(Boost REQUIRED COMPONENTS filesystem python3)
-endif()
-include_directories(include ${catkin_INCLUDE_DIRS} ${Boost_INCLUDE_DIRS} ${PYTHON_INCLUDE_DIRS})
-
-catkin_python_setup()
-
-catkin_package(
-  INCLUDE_DIRS include
-  LIBRARIES ${PROJECT_NAME}
-  CATKIN_DEPENDS sensor_msgs
-)
+include_directories(include ${catkin_INCLUDE_DIRS} ${Boost_INCLUDE_DIRS})
 
 find_package(PkgConfig)
 
@@ -34,6 +21,13 @@ else()
 endif()
 include_directories(${YAML_CPP_INCLUDE_DIRS})
 
+catkin_package(
+  INCLUDE_DIRS include
+  LIBRARIES ${PROJECT_NAME}
+  DEPENDS YAML_CPP Boost
+  CATKIN_DEPENDS sensor_msgs
+)
+
 # define the library
 add_library(${PROJECT_NAME}
   src/parse.cpp
@@ -41,17 +35,7 @@ add_library(${PROJECT_NAME}
   src/parse_yml.cpp
 )
 
-add_library(${PROJECT_NAME}_wrapper
-  src/parse_wrapper.cpp)
-
-target_link_libraries(${PROJECT_NAME} ${catkin_LIBRARIES} ${YAML_CPP_LIBRARIES} ${Boost_FILESYSTEM_LIBRARY})
-target_link_libraries(${PROJECT_NAME}_wrapper ${PROJECT_NAME} ${catkin_LIBRARIES} ${Boost_LIBRARIES} ${PYTHON_LIBRARIES})
-
-# Don't prepend wrapper library name with lib and add to Python libs.
-set_target_properties(${PROJECT_NAME}_wrapper PROPERTIES
-        PREFIX ""
-        LIBRARY_OUTPUT_DIRECTORY ${CATKIN_DEVEL_PREFIX}/${CATKIN_PACKAGE_PYTHON_DESTINATION}
-        )
+target_link_libraries(${PROJECT_NAME} ${catkin_LIBRARIES} ${YAML_CPP_LIBRARIES} ${Boost_LIBRARIES})
 
 add_dependencies(${PROJECT_NAME} ${catkin_EXPORTED_TARGETS})
 
@@ -74,10 +58,6 @@ install(
   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
 )
 
-install(TARGETS ${PROJECT_NAME}_wrapper
-  DESTINATION ${CATKIN_PACKAGE_PYTHON_DESTINATION}
-)
-
 if(CATKIN_ENABLE_TESTING)
   add_subdirectory(test)
 endif()

--- catkin_ws/src/image_common/camera_calibration_parsers/include/camera_calibration_parsers/parse_wrapper.h
+++ /dev/null
@@ -1,44 +0,0 @@
-/*********************************************************************
-* Software License Agreement (BSD License)
-* 
-*  Redistribution and use in source and binary forms, with or without
-*  modification, are permitted provided that the following conditions
-*  are met:
-* 
-*   * Redistributions of source code must retain the above copyright
-*     notice, this list of conditions and the following disclaimer.
-*   * Redistributions in binary form must reproduce the above
-*     copyright notice, this list of conditions and the following
-*     disclaimer in the documentation and/or other materials provided
-*     with the distribution.
-*   * Neither the name of the Willow Garage nor the names of its
-*     contributors may be used to endorse or promote products derived
-*     from this software without specific prior written permission.
-* 
-*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
-*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
-*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-*  POSSIBILITY OF SUCH DAMAGE.
-*********************************************************************/
-
-#ifndef CAMERA_CALIBRATION_PARSERS_PARSE_WRAPPER_H
-#define CAMERA_CALIBRATION_PARSERS_PARSE_WRAPPER_H
-
-#include <string>
-#include <boost/python.hpp>
-
-namespace camera_calibration_parsers {
-
-boost::python::tuple readCalibrationWrapper(const std::string& file_name);
-
-} //namespace camera_calibration_parsers
-
-#endif

--- catkin_ws/src/image_common/camera_calibration_parsers/src/parse_wrapper.cpp
+++ /dev/null
@@ -1,74 +0,0 @@
-/*********************************************************************
-* Software License Agreement (BSD License)
-* 
-*  Redistribution and use in source and binary forms, with or without
-*  modification, are permitted provided that the following conditions
-*  are met:
-* 
-*   * Redistributions of source code must retain the above copyright
-*     notice, this list of conditions and the following disclaimer.
-*   * Redistributions in binary form must reproduce the above
-*     copyright notice, this list of conditions and the following
-*     disclaimer in the documentation and/or other materials provided
-*     with the distribution.
-*   * Neither the name of the Willow Garage nor the names of its
-*     contributors may be used to endorse or promote products derived
-*     from this software without specific prior written permission.
-* 
-*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
-*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
-*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-*  POSSIBILITY OF SUCH DAMAGE.
-*********************************************************************/
-
-#include "camera_calibration_parsers/parse.h"
-#include "camera_calibration_parsers/parse_wrapper.h"
-
-#include <boost/python.hpp>
-#include <ros/serialization.h>
-
-namespace camera_calibration_parsers {
-
-/* Write a ROS message into a serialized string.
- * @from https://github.com/galou/python_bindings_tutorial/blob/master/src/add_two_ints_wrapper.cpp#L27
-*/
-template <typename M>
-std::string to_python(const M& msg)
-{
-  size_t serial_size = ros::serialization::serializationLength(msg);
-  boost::shared_array<uint8_t> buffer(new uint8_t[serial_size]);
-  ros::serialization::OStream stream(buffer.get(), serial_size);
-  ros::serialization::serialize(stream, msg);
-  std::string str_msg;
-  str_msg.reserve(serial_size);
-  for (size_t i = 0; i < serial_size; ++i)
-  {
-    str_msg.push_back(buffer[i]);
-  }
-  return str_msg;
-}
-
-// Wrapper for readCalibration()
-boost::python::tuple readCalibrationWrapper(const std::string& file_name)
-{
-  std::string camera_name;
-  sensor_msgs::CameraInfo camera_info;
-  bool result = readCalibration(file_name, camera_name, camera_info);
-  std::string cam_info = to_python(camera_info);
-  return boost::python::make_tuple(result, camera_name, cam_info);
-}
-
-BOOST_PYTHON_MODULE(camera_calibration_parsers_wrapper)
-{
-    boost::python::def("__readCalibrationWrapper", readCalibrationWrapper, boost::python::args("file_name"), "");
-}
-
-} //namespace camera_calibration_parsers
