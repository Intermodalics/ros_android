diff -ur catkin_ws/src/navigation/costmap_2d/CMakeLists.txt catkin_ws/src/navigation/costmap_2d/CMakeLists.txt
--- catkin_ws/src/navigation/costmap_2d/CMakeLists.txt	2014-12-06 03:49:50.000000000 -0300
+++ catkin_ws/src/navigation/costmap_2d/CMakeLists.txt	2015-02-20 19:51:25.355809604 -0300
@@ -95,6 +95,11 @@
   src/costmap_math.cpp
   src/footprint.cpp
   src/costmap_layer.cpp
+  plugins/footprint_layer.cpp
+  plugins/inflation_layer.cpp
+  plugins/obstacle_layer.cpp
+  plugins/static_layer.cpp
+  src/observation_buffer.cpp
 )
 add_dependencies(costmap_2d geometry_msgs_gencpp)
 target_link_libraries(costmap_2d
diff -ur catkin_ws/src/navigation/costmap_2d/include/costmap_2d/costmap_2d_ros.h catkin_ws/src/navigation/costmap_2d/include/costmap_2d/costmap_2d_ros.h
--- catkin_ws/src/navigation/costmap_2d/include/costmap_2d/costmap_2d_ros.h	2014-12-06 03:49:50.000000000 -0300
+++ catkin_ws/src/navigation/costmap_2d/include/costmap_2d/costmap_2d_ros.h	2015-02-20 19:54:14.015805735 -0300
@@ -45,7 +45,10 @@
 #include <costmap_2d/footprint.h>
 #include <geometry_msgs/Polygon.h>
 #include <dynamic_reconfigure/server.h>
-#include <pluginlib/class_loader.h>
+#include <costmap_2d/footprint_layer.h>
+#include <costmap_2d/inflation_layer.h>
+#include <costmap_2d/obstacle_layer.h>
+#include <costmap_2d/static_layer.h>
 
 class SuperValue : public XmlRpc::XmlRpcValue
 {
@@ -280,7 +283,6 @@
   ros::Timer timer_;
   ros::Time last_publish_;
   ros::Duration publish_cycle;
-  pluginlib::ClassLoader<Layer> plugin_loader_;
   tf::Stamped<tf::Pose> old_pose_;
   Costmap2DPublisher* publisher_;
   dynamic_reconfigure::Server<costmap_2d::Costmap2DConfig> *dsrv_;
diff -ur catkin_ws/src/navigation/costmap_2d/src/costmap_2d_ros.cpp catkin_ws/src/navigation/costmap_2d/src/costmap_2d_ros.cpp
--- catkin_ws/src/navigation/costmap_2d/src/costmap_2d_ros.cpp	2014-12-06 03:49:50.000000000 -0300
+++ catkin_ws/src/navigation/costmap_2d/src/costmap_2d_ros.cpp	2015-02-20 19:23:38.511847844 -0300
@@ -62,9 +62,7 @@
 
 Costmap2DROS::Costmap2DROS(std::string name, tf::TransformListener& tf) :
     layered_costmap_(NULL), name_(name), tf_(tf), stop_updates_(false), initialized_(true), stopped_(false), robot_stopped_(
-        false), map_update_thread_(NULL), last_publish_(0), plugin_loader_("costmap_2d",
-                                                                           "costmap_2d::Layer"), publisher_(
-        NULL)
+        false), map_update_thread_(NULL), last_publish_(0), publisher_(NULL)
 {
   ros::NodeHandle private_nh("~/" + name);
   ros::NodeHandle g_nh;
@@ -114,16 +112,28 @@
   {
     XmlRpc::XmlRpcValue my_list;
     private_nh.getParam("plugins", my_list);
-    for (int32_t i = 0; i < my_list.size(); ++i)
-    {
-      std::string pname = static_cast<std::string>(my_list[i]["name"]);
-      std::string type = static_cast<std::string>(my_list[i]["type"]);
-      ROS_INFO("Using plugin \"%s\"", pname.c_str());
-
-      boost::shared_ptr<Layer> plugin = plugin_loader_.createInstance(type);
-      layered_costmap_->addPlugin(plugin);
-      plugin->initialize(layered_costmap_, name + "/" + pname, &tf_);
+
+    ROS_INFO("Using plugin \"footprint_layer\"");
+    boost::shared_ptr<Layer> footprint (new costmap_2d::FootprintLayer());
+    layered_costmap_->addPlugin(footprint);
+    footprint->initialize(layered_costmap_, name + "/" + std::string("footprint_layer"), &tf_);
+
+    ROS_INFO("Using plugin \"inflation_layer\"");
+    boost::shared_ptr<Layer> inflation (new costmap_2d::InflationLayer());
+    layered_costmap_->addPlugin(inflation);
+    inflation->initialize(layered_costmap_, name + "/" + std::string("inflation_layer"), &tf_);
+
+    if(name == "global_costmap"){
+      ROS_INFO("Using plugin \"static_layer\"");
+      boost::shared_ptr<Layer> static_ (new costmap_2d::StaticLayer());
+      layered_costmap_->addPlugin(static_);
+      static_->initialize(layered_costmap_, name + "/" + std::string("static_layer"), &tf_);
     }
+
+    ROS_INFO("Using plugin \"obstacle_layer\"");
+    boost::shared_ptr<Layer> obstacle (new costmap_2d::ObstacleLayer());
+    layered_costmap_->addPlugin(obstacle);
+    obstacle->initialize(layered_costmap_, name + "/" + std::string("obstacle_layer"), &tf_);
   }
 
   // subscribe to the footprint topic
